// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wan_android_getx/bean/banner_data_entity.dart';
import 'package:wan_android_getx/generated/json/banner_data_entity_helper.dart';
import 'package:wan_android_getx/bean/integral_entity.dart';
import 'package:wan_android_getx/generated/json/integral_entity_helper.dart';
import 'package:wan_android_getx/bean/home_article_entity.dart';
import 'package:wan_android_getx/generated/json/home_article_entity_helper.dart';
import 'package:wan_android_getx/bean/login_entity.dart';
import 'package:wan_android_getx/generated/json/login_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case BannerDataEntity:
				return bannerDataEntityFromJson(data as BannerDataEntity, json) as T;
			case IntegralEntity:
				return integralEntityFromJson(data as IntegralEntity, json) as T;
			case HomeArticleEntity:
				return homeArticleEntityFromJson(data as HomeArticleEntity, json) as T;
			case HomeArticleDatas:
				return homeArticleDatasFromJson(data as HomeArticleDatas, json) as T;
			case HomeArticleDatasTags:
				return homeArticleDatasTagsFromJson(data as HomeArticleDatasTags, json) as T;
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case BannerDataEntity:
				return bannerDataEntityToJson(data as BannerDataEntity);
			case IntegralEntity:
				return integralEntityToJson(data as IntegralEntity);
			case HomeArticleEntity:
				return homeArticleEntityToJson(data as HomeArticleEntity);
			case HomeArticleDatas:
				return homeArticleDatasToJson(data as HomeArticleDatas);
			case HomeArticleDatasTags:
				return homeArticleDatasTagsToJson(data as HomeArticleDatasTags);
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (BannerDataEntity).toString()){
			return BannerDataEntity().fromJson(json);
		}
		if(type == (IntegralEntity).toString()){
			return IntegralEntity().fromJson(json);
		}
		if(type == (HomeArticleEntity).toString()){
			return HomeArticleEntity().fromJson(json);
		}
		if(type == (HomeArticleDatas).toString()){
			return HomeArticleDatas().fromJson(json);
		}
		if(type == (HomeArticleDatasTags).toString()){
			return HomeArticleDatasTags().fromJson(json);
		}
		if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<BannerDataEntity>[] is M){
			return data.map<BannerDataEntity>((e) => BannerDataEntity().fromJson(e)).toList() as M;
		}
		if(<IntegralEntity>[] is M){
			return data.map<IntegralEntity>((e) => IntegralEntity().fromJson(e)).toList() as M;
		}
		if(<HomeArticleEntity>[] is M){
			return data.map<HomeArticleEntity>((e) => HomeArticleEntity().fromJson(e)).toList() as M;
		}
		if(<HomeArticleDatas>[] is M){
			return data.map<HomeArticleDatas>((e) => HomeArticleDatas().fromJson(e)).toList() as M;
		}
		if(<HomeArticleDatasTags>[] is M){
			return data.map<HomeArticleDatasTags>((e) => HomeArticleDatasTags().fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}